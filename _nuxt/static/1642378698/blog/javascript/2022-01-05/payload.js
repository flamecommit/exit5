__NUXT_JSONP__("/blog/javascript/2022-01-05", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak){return {data:[{article:{slug:K,title:"[Javascript] 셋",author:"신용준",date:K,toc:[{id:s,depth:2,text:s}],body:{type:"root",children:[{type:b,tag:"h2",props:{id:s},children:[{type:b,tag:G,props:{href:"#%EC%85%8B",ariaHidden:D,tabIndex:L},children:[{type:b,tag:c,props:{className:[M,N]},children:[]}]},{type:a,value:s}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"셋(set)"}]},{type:a,value:"은 중복을 허용하지 않는 값을 모아놓은 특별한 컬렉션입니다. 셋에 키가 없는 값이 저장됩니다."}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"주요 메서드는 다음과 같습니다."}]},{type:a,value:f},{type:b,tag:O,props:{},children:[{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"new Set(iterable)"}]},{type:a,value:" : 셋을 만듭니다. "},{type:b,tag:h,props:{},children:[{type:a,value:"이터러블"}]},{type:a,value:" 객체를 전달받으면(대개 배열을 전달받음) 그 안의 값을 복사해 셋에 넣어줍니다."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:P}]},{type:a,value:" : 값을 추가하고 셋 자신을 반환합니다."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.delete(value)"}]},{type:a,value:" : 값을 제거합니다. 호출 시점에 셋 내에 값이 있어서 제거에 성공하면 "},{type:b,tag:h,props:{},children:[{type:a,value:D}]},{type:a,value:Q},{type:b,tag:h,props:{},children:[{type:a,value:R}]},{type:a,value:S}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.has(value)"}]},{type:a,value:" : 셋 내에 값이 존재하면 "},{type:b,tag:h,props:{},children:[{type:a,value:D}]},{type:a,value:Q},{type:b,tag:h,props:{},children:[{type:a,value:R}]},{type:a,value:S}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.clear()"}]},{type:a,value:" : 셋을 비웁니다."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.size"}]},{type:a,value:" : 셋에 몇 개의 값이 있는지 세줍니다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"셋 내에 동일한 값(value)이 있다면 "},{type:b,tag:h,props:{},children:[{type:a,value:P}]},{type:a,value:"를 아무리 많이 호출하더라도 아무런 반응이 없을 겁니다. 셋 내의 값에 중복이 없는 이유가 바로 이 때문이죠."}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"방문자 방명록을 만든다고 가정해 봅시다. 한 방문자가 여러 번 방문해도 방문자를 중복해서 기록하지 않겠다고 결정 내린 상황입니다. 즉, 한 방문자는 '단 한 번만 기록'되어야 합니다."}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"이때 적합한 자료구조가 바로 "},{type:b,tag:h,props:{},children:[{type:a,value:s}]},{type:a,value:"입니다."}]},{type:a,value:f},{type:b,tag:T,props:{className:[U]},children:[{type:b,tag:V,props:{className:[W,X]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,_]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:" john "},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:I}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"'John'"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:" pete "},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:I}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"'Pete'"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:" mary "},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:H},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:I}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"'Mary'"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"\u002F\u002F 어떤 고객(john, mary)은 여러 번 방문할 수 있습니다."}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,x,n,r]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,x,n,r]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"pete"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,x,n,r]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,x,n,r]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aa},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,x,n,r]},children:[{type:a,value:C}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ab},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"\u002F\u002F 셋에는 유일무이한 값만 저장됩니다."}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ac},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"size"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"\u002F\u002F 3"}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l,ad]},children:[{type:a,value:ae}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:" user "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:af}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"user"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,r]},children:[{type:a,value:"name"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"\u002F\u002F John, Pete, Mary 순으로 출력됩니다."}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:s}]},{type:a,value:" 대신 배열을 사용하여 방문자 정보를 저장한 후, 중복 값 여부는 배열 메서드인 arr.find를 이용해 확인할 수도 있습니다. 하지만 arr.find는 배열 내 요소 전체를 뒤져 중복 값을 찾기 때문에, 셋보다 성능 면에서 떨어집니다. 반면, "},{type:b,tag:h,props:{},children:[{type:a,value:s}]},{type:a,value:"은 값의 유일무이함을 확인하는데 최적화되어있습니다."}]},{type:a,value:f},{type:b,tag:"h1",props:{id:"셋의-값에-반복-작업하기"},children:[{type:b,tag:G,props:{href:"#%EC%85%8B%EC%9D%98-%EA%B0%92%EC%97%90-%EB%B0%98%EB%B3%B5-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0",ariaHidden:D,tabIndex:L},children:[{type:b,tag:c,props:{className:[M,N]},children:[]}]},{type:a,value:"셋의 값에 반복 작업하기"}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"for..of"}]},{type:a,value:"나 "},{type:b,tag:h,props:{},children:[{type:a,value:ai}]},{type:a,value:"를 사용하면 셋의 값을 대상으로 반복 작업을 수행할 수 있습니다."}]},{type:a,value:f},{type:b,tag:T,props:{className:[U]},children:[{type:b,tag:V,props:{className:[W,X]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:Y},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:y}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:Z}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,_]},children:[{type:a,value:$}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"["}]},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"\"oranges\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"\"apples\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,v]},children:[{type:a,value:"\"bananas\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"]"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,l,ad]},children:[{type:a,value:ae}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:t}]},{type:a,value:" value "},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:af}]},{type:a,value:ag},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:u},{type:b,tag:c,props:{className:[d,B]},children:[{type:a,value:"\u002F\u002F forEach를 사용해도 동일하게 동작합니다."}]},{type:a,value:w},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:q}]},{type:b,tag:c,props:{className:[d,x,n,r]},children:[{type:a,value:ai}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,"parameter"]},children:[{type:a,value:J},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:" valueAgain"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,l]},children:[{type:a,value:ac}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,"arrow",p]},children:[{type:a,value:"=\u003E"}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:z}]},{type:a,value:ah},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:J},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:A}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:k}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"흥미로운 점이 눈에 띄네요. forEach에 쓰인 콜백 함수는 세 개의 인수를 받는데, 첫 번째는 값, 두 번째도 같은 값인 valueAgain을 받고 있습니다. 세 번째는 목표하는 객체(셋)이고요. 동일한 값이 인수에 두 번 등장하고 있습니다."}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"이렇게 구현된 이유는 맵과의 호환성 때문입니다. 맵의 forEach에 쓰인 콜백이 세 개의 인수를 받을 때를 위해서죠. 이상해 보이겠지만 이렇게 구현해 놓았기 때문에 맵을 셋으로 혹은 셋을 맵으로 교체하기가 쉽습니다."}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"셋에도 맵과 마찬가지로 반복 작업을 위한 메서드가 있습니다."}]},{type:a,value:f},{type:b,tag:O,props:{},children:[{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.keys()"}]},{type:a,value:" : 셋 내의 모든 값을 포함하는 이터러블 객체를 반환합니다."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.values()"}]},{type:a,value:" : set.keys와 동일한 작업을 합니다. 맵과의 호환성을 위해 만들어진 메서드입니다."}]},{type:a,value:f},{type:b,tag:o,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"set.entries()"}]},{type:a,value:" : 셋 내의 각 값을 이용해 만든 [value, value] 배열을 포함하는 이터러블 객체를 반환합니다. 맵과의 호환성을 위해 만들어졌습니다."}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:m,props:{},children:[{type:a,value:"출처 : "},{type:b,tag:G,props:{href:aj,rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:aj}]}]}]},dir:"\u002Fjavascript",path:"\u002Fjavascript\u002F2022-01-05",extension:".md",createdAt:ak,updatedAt:ak}}],fetch:{"data-v-21c210bb:0":{directory_list:["javascript","react","vue"]}},mutations:[]}}("text","element","span","token","punctuation","\n"," ","code","(",")",";","keyword","p","function","li","operator",".","property-access","셋","let","\n\n","string","\nset","method","=","{","}","comment","add","true","alert",",","a"," name",":","value","2022-01-05",-1,"icon","icon-link","ul","set.add(value)",", 아니면 ","false","를 반환합니다.","div","nuxt-content-highlight","pre","language-js","line-numbers"," set ","new","class-name","Set","john","mary","set","control-flow","for","of"," set","\n  ","forEach","https:\u002F\u002Fko.javascript.info\u002Fmap-set","2022-01-17T00:16:44.282Z")));